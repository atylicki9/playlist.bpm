from flask import Flask, request, jsonify, abort 
from flask_cors import CORS, cross_origin
from os import environ
import requests
import random

api = Flask(__name__)

# to run>
# in backend directory: source env/bin/activate
# then enter flask run and navigate to api 

@api.route('/userInfo', methods=['POST'])
@cross_origin(origin='*')
def get_user_info():
    headers = {
        'Authorization': 'Bearer ' + request.json['token'],
        'Content-Type': 'application/json'
    }

    response = requests.get('https://api.spotify.com/v1/me', headers=headers)
    if response.status_code == 200:
        user_info = response.json()
        print(user_info)
        return jsonify({'userInfo':user_info}), 200
    else:
        abort(response.status_code)


@api.route('/tracks', methods = ['POST'])
@cross_origin(origin='*')
def tracks():
    headers = {
        'Authorization': 'Bearer '+ request.json['token'],
        'Content-Type': 'application/json'
    }

    trackParams = {
        'limit': request.json['numberOfSongs'],
        'min_tempo': request.json['tempo'] - 10,
        'max_tempo': request.json['tempo'] + 10,
        'target_danceability': random.uniform(0.6, 1),
        'target_energy': random.uniform(0.6, 1),
        'seed_genres': request.json['genres'],
        'min_popularity': 40,
    }

    response = requests.get('https://api.spotify.com/v1/recommendations',  params=trackParams, headers=headers )

    if response.status_code == 200:
        recommendations = response.json()
        print(recommendations)        

        return jsonify({'trackParams': trackParams, 'recommendations': recommendations}), 201
    else:
        print(response.json())
        abort(response.status_code)

@api.route('/createPlaylist', methods = ['POST'])
@cross_origin(origin='*')
def createPlaylist():
    headers = {
        'Authorization': 'Bearer '+ request.json['token'],
        'Content-Type': 'application/json'
    }

    playlistParams = {
        'name': request.json['playlistName'],
        'description': "Generated by Playlist.bpm",
        'public': False
    }
    print(playlistParams)
    response = requests.post(f"https://api.spotify.com/v1/users/{request.json['userId']}playlists",  json=playlistParams, headers=headers )

    if response.status_code == 200:
        response = response.json()       
        print("Playlist Generated. Response: " + response)
        return jsonify({'apiResponse': response}), 201
    else:
        print(request)
        print(response.json())
        error_response = {
            'error': 'An error occurred',
            'message': response.json()
        }
        return jsonify(error_response), response.status_code

@api.route('/addTracksToPlaylist', methods = ['POST'])
@cross_origin(origin='*')
def addTracksToPlaylist():
    playlist_id = request.json['playlistId']
    headers = {
        'Authorization': 'Bearer '+ request.json['token'],
        'Content-Type': 'application/json'
    }
    playlistParams = {
        "uris": request.json['songIds']
    }
    print(playlistParams)
    url = f"https://api.spotify.com/v1/playlists/{playlist_id}/tracks"

    response = requests.post(url, json=playlistParams, headers=headers)

    if response.status_code == 200:
        response = response.json()       
        print("Playlist Generated. Response: " + response)
        return jsonify({'apiResponse': response}), 201
    else:
        print(request)
        print(response.json())
        error_response = {
            'error': 'An error occurred',
            'message': response.json()
        }
        return jsonify(error_response), response.status_code